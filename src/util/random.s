.section .iwram,"ax",%progbits

;------------------------------------------------------------------------------
; void InitRandom()
;------------------------------------------------------------------------------
; Description: Initializes the RNG with a seed. Uses Timer 0 for randomness.
;------------------------------------------------------------------------------
; Parameters:
; r0 = RNG seed
;------------------------------------------------------------------------------
; Returns:
; Nothing.
;------------------------------------------------------------------------------

InitRandom:
    ldr r1, =0x4000100 ; TM0CNT
    strh r0, [r1], #2
    
    ldr r0, =0x80
    strh r0, [r1]

    bx lr

;------------------------------------------------------------------------------
; void GetRandomNumber()
;------------------------------------------------------------------------------
; Description: Returns a random number from 0 - 65535
;------------------------------------------------------------------------------
; Parameters:
; None.
;------------------------------------------------------------------------------
; Returns:
; r0 = A random number from 0 - 65535
;------------------------------------------------------------------------------

GetRandomNumber:
    ldr r0, =0x04000100 ; TM0CNT
    ldrh r0, [r0]

    bx lr

;------------------------------------------------------------------------------
; void GetRandomNumberRanged()
;------------------------------------------------------------------------------
; Description: Returns a random number from 0 - <some user defined value>
;------------------------------------------------------------------------------
; Parameters:
; r0 = The upper limit for the random number. Must be <= 65535.
;------------------------------------------------------------------------------
; Returns:
; r0 = A random number from 0 - <some user defined value>
;------------------------------------------------------------------------------

GetRandomNumberRanged:
    push {lr}

    mov r1, r0
    bl GetRandomNumber
    
    swi #6 ; division
    mov r0, r1 ; the modulo result

    pop {pc}